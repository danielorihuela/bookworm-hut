* Bookworm Hut

Book reading tracker web application built in Clojure and ClojureScript.

** Goal

The idea of the project is to create a simple book reading tracker while improving my craftsmanship, expanding my knowledge and getting out of my comfort zone. To that end, I will work with a Lispy language emphasizing the functional programming paradigm. Two things that I didn't have the pleasure to try out during my professional career. At the same time, this will give me more insights into Lisp and maybe understand a better why some people like Paul Graham praise it.

** Dependencies

*TODO*: List dependencies and explain the installation steps to run the project

** Local Development

Check each folder README.

*** Frontend

Install and start the app. Code changes are automatically pushed to your browser on save.

#+begin_src bash
  npm install
  npx shadow-cljs watch app
#+end_src

Running the app with repl in emacs

1. Execute "cider-jack-in-cljs"
2. Select "shadow"
3. Select ":app"
4. Wait
5. Emacs will ask if you want to visit the web in the browser. Press "y" and it will be automatically opened for you.

We can run it on release mode with

#+begin_src bash
  npm install
  npm run release
#+end_src

The `resources/public/js/compiled` directory is created, containing the compiled `app.js` and
`manifest.edn` files.

*** Backend

We need a postgres sql database. Install docker and execute the following commands

#+begin_src bash
  docker pull postgres
  docker run --name bookworm_hut_postgres -e POSTGRES_USER=bookworm_hut POSTGRES_PASSWORD=bookworm_hut -d -p 5432:5432 postgres
#+end_src

Now, you can connect to the docker, create the users table and see the information in the database.

#+begin_src bash
  docker exec -it 312396dfc63e bash
  psql -U bookworm_hut
  \c bookworm_hut
  create table users (id SERIAL PRIMARY KEY NOT NULL, username varchar(30), password varchar(64));
  select * from users;
#+end_src

To run the server repl, execute

#+begin_src bash
  lein repl
#+end_src

Once the repl is initialized, we need to run

#+begin_src lisp
  (start-server)
#+end_src

After that, we can reload the code after modifying it with

#+begin_src lisp
  (use 'bookworm-hut-backend.core :reload)
#+end_src

*UNLESS* we modify the =start-server=
